1. 필드와 메서드가 뭔지?

필드: 객체가 가진 상태를 말함.
	private로
메서드: 객체가 할수 있는 동작
	public

2. 접근자, 설정자

접근자: 필드 값을 읽는(접근) 메서드()
설정자: 필드의 값을 쓰는(설정) 메서드()






public class Retangle
{
	private double height//필드
	
	public void getHeight(){ return height }//접근자
	public void setHeight(double height){ this.height = height; } //설정자

	public void print() { //실행코드
	System.out.println("Height는 "+//필드 이름(height)+"입니다.");
	
	}
}
main()
{
	Retangle rect = new Retangle();
	rect.setHeight( 20,0 );
	rect.print();
}

출력
-> height sms 20.0 입니다.

-->클래스 안에서 필드를 부른다면, 그냥 필드 이름만.
-->테스트 클래스에서 필드를 부른다면, 접근자() 사용.


car mycar = new Car(); //객체 생성(메모리 공간 할당)
car yourcar = new Car(); //객체 생성(메모리 공간 할당)

mycar.setSpeed(50);
yourcar.setSpeed();//속도 정의 X, 0을 얻음.






<값에 의한 호출>
int x = 25;//변수 선언, 초기화
int y = 47; //똑같음
--> main 함수의 변수를 바꿀수 없다.
반환값만 사용가능


<참조에 의한 호출>
Pizza c = obj //가리키는 대상을 복사
//obj와 같은 c가 같은 곳을 가리킴


--> 입력 맏은 객체를 함수 내에서 바꾸면 함수 호출이 끝나고 반환되도 main 함수의 변수를 바꿀수 있음.


double[] array1 = {0.1, 0.5, 0.7, 1.0, 1.5};
double[] array2 = {10.0, 5.0, 2.5, 1.25, -9.0, -5.7}

호출 메서드
calc.minArray(array1);
calc.minArray(array2);



최소
public double minArray(double[] list)
{
	double min = 1000;
	for (int i;i<list.length;i++)
	{
		if (min > list[i])
		min = list[i]; //만일 저장된 최소값보다 현재 배열의 원소값이 작다면 이 값으로 변경
	}
}


정적 멤버

자동차: 모델, 회사명

myCar = (제네시스, 현대)
yourcar = (K7,기아)

클래스를 이용, 공유해야 하는 정보를 저장 가능.
하지만, 객체마다 그 정보를 가지며, n개를 생성. 공유 정보는 1개만 생성될수 있도록 정적 멤버를 만들어야 한다.

피자 클래스를 만들고, 피자 객체를 생성하기 시작.

이때, 객체의 개수를 알고 싶다면?
--> static 변수를 사용해서 count하자.
 객체를 생성할때마다 ++

 Class Pizza{
	필드 생성
	static int count = 0;
	public Pizza(){count++;}

	생성자 반환형 X, 클래스 이름이랑 동일해야 한다.

	
 }